{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Creates a shoutcast server.",

    "Parameters" : {

        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },

        "SSHLocation" : {
            "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "0.0.0.0/0",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },

        "ShoutCastInstanceType" : {
            "Description" : "ShoutCast Server EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" : [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m3.medium"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },

        "TargetRoute53Domain": {
            "Description": "The Route53 Zone to update with an elastic IP",
            "Type": "String"
        },

        "TargetRoute53Name": {
            "Description": "The subdomain to place before your root (can be empty)",
            "Type": "String",
            "Default": ""
        },

        "SourcePassword": {
            "Description": "Password to stream to this server",
            "Type": "String"
        },

        "RelayPassword": {
            "Description": "Password to relay via this server",
            "Type": "String"
        },

        "AdminPassword": {
            "Description": "Password to administrate to this server",
            "Type": "String"
        },

        "ShoutCastAMI": {
            "Description": "AMI to deploy with",
            "Type": "String",
            "Default": "ami-f1384f94"
        },

        "ListenAddress": {
            "Description": "Address to listen on (don't change this maybe.)",
            "Type": "String",
            "Default": "0.0.0.0"
        }

    },

    "Mappings" : {
        "SubnetConfig" : {
            "VPC"     : { "CIDR" : "10.0.0.0/16" },
            "Public"  : { "CIDR" : "10.0.0.0/24" }
        }
    },

    "Conditions": {
        "UseNakedDomain": { "Fn::Equals": [{"Ref": "TargetRoute53Name"}, "" ] }
    },

    "Resources" : {

        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },

        "PublicSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },

        "GatewayToInternet" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },

        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PublicSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },

        "InboundShoutCastPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "9000", "To" : "9001" }
            }
        },

        "InboundDynamicPortPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },

        "InboundSSHPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "102",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Ref" : "SSHLocation" },
                "PortRange" : { "From" : "22", "To" : "22" }
            }
        },

        "OutboundPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "0", "To" : "65535" }
            }
        },

        "PublicSubnetNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PublicShoutCastSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Public Security Group with HTTP access on port 9000 and 9001 from the internet",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "9000", "ToPort" : "9001", "CidrIp" : "0.0.0.0/0"},
                    { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" }}
                ]
            }
        },

        "ShoutCastRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Policies": [ {
                    "PolicyName": "BindPublicEIP",
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [ {
                            "Effect": "Allow",
                            "Action": "ec2:AssociateAddress",
                            "Resource": "*"
                        } ]
                    }
                } ]
            }
        },

        "ShoutCastInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles":[ { "Ref": "ShoutCastRole" } ]
            }
        },

        "ShoutCastServerEIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },

        "Route53RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {"Ref": "TargetRoute53Domain"},
                "Name": {
                    "Fn::If": [
                        "UseNakedDomain",
                        {"Ref": "TargetRoute53Domain"},
                        { "Fn::Join": [".", [{"Ref": "TargetRoute53Name"}, {"Ref": "TargetRoute53Domain"}]]}
                    ]
                },
                "Type": "A",
                "TTL": "60",
                "ResourceRecords": [
                    { "Ref": "ShoutCastServerEIP" }
                ]
            }
        },

        "ShoutCastServers" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn" : "PublicRoute",
            "Properties" : {
                "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] }],
                "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
                "LaunchConfigurationName" : { "Ref" : "ShoutCastLaunchConfig"  },
                "MinSize" : "0",
                "MaxSize" : "1",
                "DesiredCapacity" : "1",
                "Tags" : [ { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" } ]
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "0",
                    "MaxBatchSize": "1",
                    "PauseTime" : "PT1M",
                    "WaitOnResourceSignals": "false"
                }
            }
        },

        "ShoutCastLaunchConfig"  : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files" : {
                            "/etc/icecast.envs" : {
                                "content" : { "Fn::Join" : ["", [
                                    "SOURCE_PASSWORD=", {"Ref": "SourcePassword"}, "\n",
                                    "RELAY_PASSWORD=", {"Ref": "RelayPassword"}, "\n",
                                    "ADMIN_PASSWORD=", {"Ref": "AdminPassword"}, "\n",
                                    "SERVERNAME=", {"Ref": "Route53RecordSet"}, "\n",
                                    "LISTEN_ADDRESS=", {"Ref": "ListenAddress"}, "\n"
                                ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        }
                    }
                }
            },

            "Properties" : {
                "ImageId"        : { "Ref": "ShoutCastAMI" },
                "SecurityGroups" : [ { "Ref" : "PublicShoutCastSecurityGroup" } ],
                "InstanceType"   : { "Ref" : "ShoutCastInstanceType" },
                "IamInstanceProfile": {"Ref": "ShoutCastInstanceProfile" },
                "KeyName"        : { "Ref" : "KeyName" },
                "AssociatePublicIpAddress" : "true",
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "# Install the shoutcast application\n",
                    "cfn-init -v ",
                    "    --stack ", { "Ref" : "AWS::StackId" },
                    "    --resource ShoutCastLaunchConfig ",
                    "    --region ", { "Ref" : "AWS::Region" }, "\n",
                    "docker rm -f shoutcast || true\n",
                    "docker run ",
                    "    --restart=always",
                    "    --env-file=/etc/icecast.envs",
                    "    --detach",
                    "    -p 9000:9000",
                    "    -p 9001:9001",
                    "    --name shoutcast",
                    "    shoutcast:latest\n",

                    "aws ec2 associate-address",
                    "    --allow-reassociation",
                    "    --region ",
                    { "Ref": "AWS::Region" },
                    "    --allocation-id ",
                    { "Fn::GetAtt": [ "ShoutCastServerEIP", "AllocationId" ] },
                    "    --instance-id ",
                    "    $(ec2metadata --instance-id)",
                    "\n",

                    "# Signal completion\n",
                    "cfn-signal -e $? ",
                    "    --stack ", { "Ref" : "AWS::StackId" },
                    "    --resource ShoutCastServers ",
                    "    --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}}
            }
        }

    },

    "Outputs" : {
    }
}
